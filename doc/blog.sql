/*
Navicat MySQL Data Transfer

Source Server         : local
Source Server Version : 50525
Source Host           : localhost:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50525
File Encoding         : 65001

Date: 2014-11-29 10:42:33
*/

SET FOREIGN_KEY_CHECKS=0;
-- ----------------------------
-- Table structure for `l4_activations`
-- ----------------------------
DROP TABLE IF EXISTS `l4_activations`;
CREATE TABLE `l4_activations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `email` varchar(255) NOT NULL COMMENT '邮箱',
  `token` varchar(255) NOT NULL COMMENT '令牌',
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  UNIQUE KEY `activations_token_unique` (`token`),
  KEY `activations_email_index` (`email`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='账号激活';

-- ----------------------------
-- Records of l4_activations
-- ----------------------------

-- ----------------------------
-- Table structure for `l4_article_categories`
-- ----------------------------
DROP TABLE IF EXISTS `l4_article_categories`;
CREATE TABLE `l4_article_categories` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL COMMENT '分类名称',
  `sort_order` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '排序',
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `article_categories_name_unique` (`name`)
) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='文章分类';

-- ----------------------------
-- Records of l4_article_categories
-- ----------------------------
INSERT INTO `l4_article_categories` VALUES ('1', '默认分类', '0', '2014-11-29 10:39:43', '2014-11-29 10:39:43', null);
INSERT INTO `l4_article_categories` VALUES ('2', 'PHP-PSR 代码标准', '1', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_article_categories` VALUES ('3', '新分类二', '2', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_article_categories` VALUES ('4', '新分类三', '3', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_article_categories` VALUES ('5', '新分类四', '4', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_article_categories` VALUES ('6', '新分类五', '5', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);

-- ----------------------------
-- Table structure for `l4_article_comments`
-- ----------------------------
DROP TABLE IF EXISTS `l4_article_comments`;
CREATE TABLE `l4_article_comments` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL COMMENT '作者ID',
  `article_id` int(10) unsigned NOT NULL COMMENT '归属文章ID',
  `content` text NOT NULL COMMENT '内容',
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `article_comments_user_id_index` (`user_id`),
  KEY `article_comments_article_id_index` (`article_id`)
) ENGINE=MyISAM AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 COMMENT='文章的评论';

-- ----------------------------
-- Records of l4_article_comments
-- ----------------------------
INSERT INTO `l4_article_comments` VALUES ('1', '1', '30', '评论内容1', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('2', '2', '31', '评论内容2', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('3', '3', '32', '评论内容3', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('4', '4', '33', '评论内容4', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('5', '5', '29', '评论内容5', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('6', '6', '30', '评论内容6', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('7', '7', '31', '评论内容7', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('8', '8', '32', '评论内容8', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('9', '9', '33', '评论内容9', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('10', '10', '29', '评论内容10', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('11', '11', '30', '评论内容11', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('12', '12', '31', '评论内容12', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('13', '13', '32', '评论内容13', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('14', '14', '33', '评论内容14', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('15', '15', '29', '评论内容15', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('16', '16', '30', '评论内容16', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('17', '17', '31', '评论内容17', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('18', '18', '32', '评论内容18', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('19', '19', '33', '评论内容19', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('20', '20', '29', '评论内容20', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('21', '21', '30', '评论内容21', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('22', '22', '31', '评论内容22', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('23', '23', '32', '评论内容23', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('24', '24', '33', '评论内容24', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('25', '25', '29', '评论内容25', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('26', '26', '30', '评论内容26', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('27', '27', '31', '评论内容27', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('28', '28', '32', '评论内容28', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);
INSERT INTO `l4_article_comments` VALUES ('29', '29', '33', '评论内容29', '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);

-- ----------------------------
-- Table structure for `l4_articles`
-- ----------------------------
DROP TABLE IF EXISTS `l4_articles`;
CREATE TABLE `l4_articles` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL COMMENT '作者ID',
  `category_id` int(10) unsigned NOT NULL COMMENT '文章分类ID',
  `comments_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '评论数',
  `title` varchar(255) NOT NULL COMMENT '标题',
  `slug` varchar(255) NOT NULL COMMENT '文章缩略名',
  `content` text NOT NULL COMMENT '内容',
  `content_format` varchar(255) NOT NULL DEFAULT 'markdown' COMMENT '内容格式，为后期加入非 markdown 编辑器做准备',
  `meta_title` varchar(255) DEFAULT NULL COMMENT 'SEO 页面标题',
  `meta_description` varchar(255) DEFAULT NULL COMMENT 'SEO 页面描述',
  `meta_keywords` varchar(255) DEFAULT NULL COMMENT 'SEO 页面关键词',
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `articles_title_unique` (`title`),
  UNIQUE KEY `articles_slug_unique` (`slug`),
  KEY `articles_user_id_index` (`user_id`),
  KEY `articles_category_id_index` (`category_id`)
) ENGINE=MyISAM AUTO_INCREMENT=34 DEFAULT CHARSET=utf8 COMMENT='文章';

-- ----------------------------
-- Records of l4_articles
-- ----------------------------
INSERT INTO `l4_articles` VALUES ('1', '1', '3', '0', '标题1', 'slug-biao-ti-1', '1、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('2', '2', '4', '0', '标题2', 'slug-biao-ti-2', '2、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('3', '3', '5', '0', '标题3', 'slug-biao-ti-3', '3、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('4', '4', '2', '0', '标题4', 'slug-biao-ti-4', '4、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('5', '5', '3', '0', '标题5', 'slug-biao-ti-5', '5、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('6', '6', '4', '0', '标题6', 'slug-biao-ti-6', '6、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('7', '7', '5', '0', '标题7', 'slug-biao-ti-7', '7、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('8', '8', '2', '0', '标题8', 'slug-biao-ti-8', '8、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('9', '9', '3', '0', '标题9', 'slug-biao-ti-9', '9、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('10', '10', '4', '0', '标题10', 'slug-biao-ti-10', '10、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('11', '11', '5', '0', '标题11', 'slug-biao-ti-11', '11、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('12', '12', '2', '0', '标题12', 'slug-biao-ti-12', '12、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('13', '13', '3', '0', '标题13', 'slug-biao-ti-13', '13、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('14', '14', '4', '0', '标题14', 'slug-biao-ti-14', '14、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('15', '15', '5', '0', '标题15', 'slug-biao-ti-15', '15、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('16', '16', '2', '0', '标题16', 'slug-biao-ti-16', '16、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('17', '17', '3', '0', '标题17', 'slug-biao-ti-17', '17、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('18', '18', '4', '0', '标题18', 'slug-biao-ti-18', '18、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('19', '19', '5', '0', '标题19', 'slug-biao-ti-19', '19、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('20', '20', '2', '0', '标题20', 'slug-biao-ti-20', '20、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('21', '21', '3', '0', '标题21', 'slug-biao-ti-21', '21、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('22', '22', '4', '0', '标题22', 'slug-biao-ti-22', '22、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('23', '23', '5', '0', '标题23', 'slug-biao-ti-23', '23、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('24', '24', '2', '0', '标题24', 'slug-biao-ti-24', '24、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('25', '25', '3', '0', '标题25', 'slug-biao-ti-25', '25、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('26', '26', '4', '0', '标题26', 'slug-biao-ti-26', '26、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('27', '27', '5', '0', '标题27', 'slug-biao-ti-27', '27、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('28', '28', '2', '0', '标题28', 'slug-biao-ti-28', '28、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_articles` VALUES ('29', '29', '3', '5', '标题29', 'slug-biao-ti-29', '29、什么是依赖\n每个项目都有依赖（外界提供的输入）, 项目越复杂，越需要更多的依赖。在现今的网络应用程序中，最常见的依赖是数据库，其风险在于，一旦数据库暂停运行，那么整个程序也因此而停止运行。这是因为代码依赖数据库服务器……这已足够。因为数据库服务器有时会崩溃，而弃用它是荒谬的。尽管依赖有其自身的瑕疵，却仍然存在代码中，因为它使程序开发人员的工作更加轻松。', 'markdown', null, null, null, '2014-11-29 10:39:48', '2014-11-29 10:39:52', null);
INSERT INTO `l4_articles` VALUES ('30', '1', '2', '6', 'PSR-0 自动加载规范', 'psr-0', '下面描述了关于自动加载器特性强制性要求：\n\n强制性\n---------\n\n* 一个完全标准的命名空间必须要有以下的格式结构`\\<Vendor Name>\\(<Namespace>\\)*<Class Name>`\n* 命名空间必须有一个顶级的组织名称 (\"Vendor Name\").\n* 命名空间中可以根据情况使用任意数量的子空间\n* 从文件系统中加载源文件的时，命名空间中的分隔符将被映射为 `DIRECTORY_SEPARATOR`\n* 命名空间中的类名中的`_`没有特殊含义，也将被作为`DIRECTORY_SEPARATOR`对待.\n* 标准的命名空间和类从文件系统加载源文件时只需要加上`.php`后缀即可\n* 组织名，空间名，类名都可以随意使用大小写英文字符的组合\n\n示例\n--------\n\n* `\\Doctrine\\Common\\IsolatedClassLoader` => `/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php`\n* `\\Symfony\\Core\\Request` => `/path/to/project/lib/vendor/Symfony/Core/Request.php`\n* `\\Zend\\Acl` => `/path/to/project/lib/vendor/Zend/Acl.php`\n* `\\Zend\\Mail\\Message` => `/path/to/project/lib/vendor/Zend/Mail/Message.php`\n\n命名空间和类名中的下划线\n-----------------------------------------\n\n* `\\namespace\\package\\Class_Name` => `/path/to/project/lib/vendor/namespace/package/Class/Name.php`\n* `\\namespace\\package_name\\Class_Name` => `/path/to/project/lib/vendor/namespace/package_name/Class/Name.php`\n\n以上是我们为轻松实现自动加载特性设定的最低标准。你可以利用下面这个可以自动加载 PHP 5.3 类的SplClassLoader来测试你的代码是否符合以上这些标准。\n\n实例\n----------------------\n\n下面是一个函数实例简单展示如何使用上面建议的标准进行自动加载\n```php\n<?php\n\nfunction autoload($className)\n{\n    $className = ltrim($className, \'\\\\\');\n    $fileName  = \'\';\n    $namespace = \'\';\n    if ($lastNsPos = strrpos($className, \'\\\\\')) {\n        $namespace = substr($className, 0, $lastNsPos);\n        $className = substr($className, $lastNsPos + 1);\n        $fileName  = str_replace(\'\\\\\', DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;\n    }\n    $fileName .= str_replace(\'_\', DIRECTORY_SEPARATOR, $className) . \'.php\';\n\n    require $fileName;\n}\n```\n\nSplClassLoader实现\n-----------------------------\n\n下面的gist是一个可以按照上面建议的自动加载特性来加载类的SplClassLoader实例。这也是我们当前在PHP5.3中依据以上标准加载类时推荐的方。\n\n* [http://gist.github.com/221634](http://gist.github.com/221634)\n\n\n', 'markdown', null, null, null, '2014-11-29 10:39:49', '2014-11-29 10:39:52', null);
INSERT INTO `l4_articles` VALUES ('31', '1', '2', '6', 'PSR-1 基础编码规范', 'psr-1-basic-coding-standard', '基本代码规范\n=====================\n\n本节标准包含了成为标准代码所需要的基本元素，以确保开源出来的PHP代码之间有较高度的技术互用性。\n\n在 [RFC 2119][]中的特性关键词\"必须\"(MUST)，“不可”(MUST NOT)，“必要”(REQUIRED)，“将会”(SHALL)，“不会”(SHALL NOT)，“应当”(SHOULD)，“不应”(SHOULD NOT)，“推荐”(RECOMMENDED)，“可以”(MAY)和“可选”(OPTIONAL)在这文档中将被用来描述。\n\n[RFC 2119]: http://www.ietf.org/rfc/rfc2119.txt\n[PSR-0]: https://github.com/hfcorriez/fig-standards/blob/zh_CN/接受/PSR-0.md\n\n\n1. 大纲\n-----------\n\n- 源文件`必须`只使用 `<?php` 和 `<?=` 标签。\n\n- 源文件中`必须`只使用不带BOM的UTF-8作为PHP代码。\n\n- 源文件`应当`只声明符号（类，函数，常量等...）或者引起副作用（例如：生成输出，修改.ini配置等）,但`不应`同时做这两件事。\n\n- 命名空间和类`必须`遵守 [PSR-0][]。\n\n- 类名`必须`使用骆驼式`StudlyCaps`写法 (译者注：驼峰式的一种变种，后文将直接用`StudlyCaps`表示)。\n\n- 类中的常量`必须`使用全大写和下划线分隔符。\n\n- 方法名`必须`使用驼峰式`cameCase`写法(译者注：后文将直接用`camelCase`表示)。\n\n\n2. 文件\n--------\n\n### 2.1. PHP标签\n\nPHP代码`必须`只使用长标签`<?php ?>`或者短输出式`<?= ?>`标签；它`不可`使用其他的标签变种。\n\n### 2.2. 字符编码\n\nPHP代码`必须`只使用不带BOM的UTF-8。\n\n### 2.3. 副作用\n\n一个文件`应当`声明新符号 (类名，函数名，常量等)并且不产生副作用，或者`应当`执行有副作用的逻辑，但不能同时做这两件事。\n\n短语\"副作用\"意思是不直接执行逻辑的类，函数，常量等 *仅包括文件*\n\n“副作用”包含但不局限于：生成输出，显式地使用`require`或`include`，连接外部服务，修改ini配置，触发错误或异常，修改全局或者静态变量，读取或修改文件等等\n\n下面是一个既包含声明又有副作用的示例文件；即应避免的例子：\n\n```php\n<?php\n// side effect: change ini settings\nini_set(\'error_reporting\', E_ALL);\n\n// side effect: loads a file\ninclude \"file.php\";\n\n// side effect: generates output\necho \"<html>\\n\";\n\n// declaration\nfunction foo()\n{\n    // function body\n}\n```\n\n下面是一个仅包含声明的示例文件；即需要提倡的例子：\n\n```php\n<?php\n// declaration\nfunction foo()\n{\n    // function body\n}\n\n// conditional declaration is *not* a side effect\nif (! function_exists(\'bar\')) {\n    function bar()\n    {\n        // function body\n    }\n}\n```\n\n\n3. 命名空间和类名\n----------------------------\n\n命名空间和类名必须遵守 [PSR-0][].\n\n这意味着每个类必须单独一个源文件，并且至少有一级命名空间：顶级的组织名。\n\n类名必须使用骆驼式`StudlyCaps`写法。\n\nPHP5.3之后的代码`必须`使用正式的命名空间\n例子：\n\n```php\n<?php\n// PHP 5.3 and later:\nnamespace Vendor\\Model;\n\nclass Foo\n{\n}\n```\n\nPHP5.2.x之前的代码应当用伪命名空间`Vendor_`作为类名的前缀\n\n```php\n<?php\n// PHP 5.2.x and earlier:\nclass Vendor_Model_Foo\n{\n}\n```\n\n4. 类常量，属性和方法\n-------------------------------------------\n\n术语“类”指所有的类，接口和特性(traits)\n\n### 4.1. 常量\n\n类常量`必须`使用全大写，并使用分隔符作为下划线。\n例子：\n\n```php\n<?php\nnamespace Vendor\\Model;\n\nclass Foo\n{\n    const VERSION = \'1.0\';\n    const DATE_APPROVED = \'2012-06-01\';\n}\n```\n\n### 4.2. 属性\n\n本手册有意避免推荐使用`$StulyCaps`，`$camelCase`或者`unser_score`作为属性名字\n\n不管名称如何约定，它`应当`在一个合理范围内保持一致。这个范围可能是组织层，包层，类层，方法层。\n\n### 4.3. 方法\n\n方法名必须用`camelCase()`写法。\n', 'markdown', null, null, null, '2014-11-29 10:39:50', '2014-11-29 10:39:52', null);
INSERT INTO `l4_articles` VALUES ('32', '1', '2', '6', 'PSR-2 编码风格规范', 'psr-2-coding-style-guide', '代码样式规范\n==================\n\n本手册是 [PSR-1][]基础代码规范的继承和扩展\n\n本指南的意图是为了减少不同开发者在浏览代码时减少认知的差异。 为此列举一组如何格式化PHP代码的共用规则。\n\n各个成员项目的共性组成了本文的样式规则。当不同的开发者在不同的项目中合作时，将会在这些不同的项目中使用一个共同的标准。 因此，本指南的好处不在于规则本身，而在于共用这些规则。\n\n在 [RFC 2119][]中的特性关键词\"必须\"(MUST)，“不可”(MUST NOT)，“必要”(REQUIRED)，“将会”(SHALL)，“不会”(SHALL NOT)，“应当”(SHOULD)，“不应”(SHOULD NOT)，“推荐”(RECOMMENDED)，“可以”(MAY)和“可选”(OPTIONAL)在这文档中将被用来描述。\n\n[RFC 2119]: http://www.ietf.org/rfc/rfc2119.txt\n[PSR-0]: https://github.com/hfcorriez/fig-standards/blob/zh_CN/接受/PSR-0.md\n[PSR-1]: https://github.com/hfcorriez/fig-standards/blob/zh_CN/接受/PSR-1-basic-coding-standard.md\n\n\n1. 大纲\n-----------\n\n- 代码必须遵守 [PSR-1][]。\n\n- 代码`必须`使用4个空格的缩进，而不是制表符。\n\n- 一行代码长度`不应`硬性限制；软限制`必须`为120个字符；也`应当`是80个字符或者更少。\n\n- 在`namespace`声明下面`必须`有一个空行，并且`use`声明代码块下面也`必须`有一个空行。\n\n- 类的左花括号`必须`放到下一行，右花括号`必须`放在类主体的下一行。\n\n- 方法的左花括号`必须`放在下一行，右花括号`必须`放在方法主体下面。\n\n- 所有的属性和方法`必须`有可见性(译者注：Public, Protect, Private)声明；`abstract`和`final`声明`必须`在可见性之前；`static`声明`必须`在可见性之后。\n\n- 控制结构的关键词`必须`在后面有一个空格； 方法和函数`不可`有。\n\n- 控制结构的左花括号`必须`放在同一行，右花括号`必须`放在控制主体的下一行。\n\n- 控制结构的左括号后面`不可`有空格，右括号之前`不可`有空格。\n\n### 1.1. 示例\n\n本示例包含上面的一些规则简单展示：\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nuse FooInterface;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass Foo extends Bar implements FooInterface\n{\n    public function sampleFunction($a, $b = null)\n    {\n        if ($a === $b) {\n            bar();\n        } elseif ($a > $b) {\n            $foo->bar($arg1);\n        } else {\n            BazClass::bar($arg2, $arg3);\n        }\n    }\n\n    final public static function bar()\n    {\n        // method body\n    }\n}\n```\n\n2. 概括\n----------\n\n### 2.1 基础代码规范\n\n代码`必须`遵守 [PSR-1][] 的所有规则。\n\n### 2.2 文件\n\n所有的PHP文件`必须`使用Unix LF(换行)作为行结束符。\n\n所有PHP文件`必须`以一个空行结束。\n\n纯PHP代码的文件关闭标签`?>``必须`省略\n\n### 2.3. 行\n\n行长度`不可`有硬限制。\n\n行长度的软限制`必须`是120个字符；对于软限制，自动样式检查器`必须`警告但`不可`报错。\n\n行实际长度`不应`超过80个字符；较长的行`应当`被拆分成多个不超过80个字符的后续行。\n\n在非空行后面`不可`有空格。\n\n空行`可以`用来改善可读性和区分相关的代码块。\n\n一行`不应`多于一个语句。\n\n### 2.4. 缩进\n\n代码`必须`使用4个空格的缩进，并且`不可`使用制表符作为缩进。\n\n> 注意：只用空格，不和制表符混合使用，将会对避免代码差异，补丁，历史和注解中的一些问题有帮助。使用空格还可以使调整细微的缩进来改进行间对齐变得非常简单。\n\n### 2.5. 关键词和 True/False/Null\n\nPHP [keywords][] `必须`使用小写。\n\nPHP常量`true`, `false`和`null``必须`使用小写。\n\n[keywords]: http://php.net/manual/en/reserved.keywords.php\n\n\n3. Namespace和Use声明\n---------------------------------\n\n如果存在，`namespace`声明之后`必须`有一个空行。\n\n如果存在，所有的`use`声明`必须`放在`namespace`声明的下面。\n\n一个`use`关键字`必须`只用于一个声明。\n\n在`use`声明代码块后面`必须`有一个空行。\n\n示例:\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\n// ... additional PHP code ...\n\n```\n\n\n4. 类，属性和方法\n-----------------------------------\n\n术语“类”指所有的类，接口和特性（traits）。\n\n### 4.1. 扩展和继承\n\n一个类的`extends`和`implements`关键词`必须`和类名在同一行。\n\n类的左花括号`必须`放在下面自成一行；右花括号必须放在类主体的后面自成一行。\n\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass ClassName extends ParentClass implements \\ArrayAccess, \\Countable\n{\n    // constants, properties, methods\n}\n```\n\n`implements`一个列表`可以`被拆分为多个有一次缩进的后续行。如果这么做，列表的第一项`必须`要放在下一行，并且每行`必须`只有一个接口。\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass ClassName extends ParentClass implements\n    \\ArrayAccess,\n    \\Countable,\n    \\Serializable\n{\n    // constants, properties, methods\n}\n```\n\n### 4.2. 属性\n\n所有的属性`必须`声明可见性。\n\n`var`关键词`不可`用来声明属性。\n\n一个语句`不可`声明多个属性。\n\n属性名称`不应`使用单个下划线作为前缀来表明保护或私有的可见性。\n\n一个属性声明看起来应该下面这样的。\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public $foo = null;\n}\n```\n\n### 4.3. 方法\n\n所有的方法`必须`声明可见性。\n\n方法名`不应`只使用单个下划线来表明是保护或私有的可见性。\n\n方法名在声明之后`不可`跟随一个空格。左花括号`必须`放在下面自成一行，并且右花括号`必须`放在方法主体的下面自成一行。左括号后面`不可`有空格，右括号前面`不可`有空格。\n\n一个方法定义看来应该像下面这样。 注意括号，逗号，空格和花括号：\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function fooBarBaz($arg1, &$arg2, $arg3 = [])\n    {\n        // method body\n    }\n}\n```\n\n### 4.4. 方法参数\n\n在参数列表中，逗号之前`不可`有空格，逗号之后`必须`要有一个空格。\n\n方法中有默认值的参数必须放在参数列表的最后面。\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function foo($arg1, &$arg2, $arg3 = [])\n    {\n        // method body\n    }\n}\n```\n\n参数列表`可以`被分为多个有一次缩进的多个后续行。如果这么做，列表的第一项`必须`放在下一行，并且每行`必须`只放一个参数。\n\n当参数列表被分为多行，右括号和左花括号`必须`夹带一个空格放在一起自成一行。\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function aVeryLongMethodName(\n        ClassTypeHint $arg1,\n        &$arg2,\n        array $arg3 = []\n    ) {\n        // method body\n    }\n}\n```\n\n### 4.5. `abstract`，`final`和 `static`\n\n如果存在，`abstract`和`final`声明必须放在可见性声明前面。\n\n如果存在，`static`声明`必须`跟着可见性声明。\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nabstract class ClassName\n{\n    protected static $foo;\n\n    abstract protected function zim();\n\n    final public static function bar()\n    {\n        // method body\n    }\n}\n```\n\n### 4.6. 调用方法和函数\n\n要调用一个方法或函数，在方法或者函数名和左括号之间`不可`有空格，左括号之后`不可`有空格，右括号之前`不可`有空格。函数列表中，逗号之前`不可`有空格，逗号之后`必须`有一个空格。\n\n```php\n<?php\nbar();\n$foo->bar($arg1);\nFoo::bar($arg2, $arg3);\n```\n\n参数列表`可以`被拆分成多个有一个缩进的后续行。如果这么做，列表中的第一项必须放在下一行，并且每一行`必须`只有一个参数。\n\n```php\n<?php\n$foo->bar(\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n);\n```\n\n5. 控制结构\n---------------------\n\n对于控制结构的样式规则概括如下：\n\n- 控制结构关键词之后`必须`有一个空格\n- 左括号之后`不可`有空格\n- 右括号之前`不可`有空格\n- 在右括号和左花括号之间`必须`有一个空格\n- 代码主体`必须`有一次缩进\n- 右花括号`必须`主体的下一行\n\n每个结构的主体`必须`被括在花括号里。这结构看上去更标准化，并且当加新行的时候可以减少引入错误的可能性。\n\n### 5.1. `if`，`elseif`，`else`\n\n一个`if`结构看起来应该像下面这样。注意括号，空格，花括号的位置；并且`else`和`elseif`和前一个主体的右花括号在同一行。\n\n```php\n<?php\nif ($expr1) {\n    // if body\n} elseif ($expr2) {\n    // elseif body\n} else {\n    // else body;\n}\n```\n\n关键词`elseif``应该`替代`else if`使用以保持所有的控制关键词像一个单词。\n\n\n### 5.2. `switch`，`case`\n\n一个`switch`结构看起来应该像下面这样。注意括号，空格和花括号。`case`语句必须从`switch`处缩进，并且`break`关键字（或其他中止关键字）`必须`和`case`主体缩进在同级。如果一个非空的`case`主体往下落空则`必须`有一个类似`// no break`的注释。\n\n```php\n<?php\nswitch ($expr) {\n    case 0:\n        echo \'First case, with a break\';\n        break;\n    case 1:\n        echo \'Second case, which falls through\';\n        // no break\n    case 2:\n    case 3:\n    case 4:\n        echo \'Third case, return instead of break\';\n        return;\n    default:\n        echo \'Default case\';\n        break;\n}\n```\n\n\n### 5.3. `while`，`do while`\n\n一个`while`语句看起来应该像下面这样。注意括号，空格和花括号的位置。\n\n```php\n<?php\nwhile ($expr) {\n    // structure body\n}\n```\n\n同样的，一个`do while`语句看起来应该像下面这样。注意括号，空格和花括号的位置。\n\n```php\n<?php\ndo {\n    // structure body;\n} while ($expr);\n```\n\n### 5.4. `for`\n\n一个`for`语句看起来应该像下面这样。注意括号，空格和花括号的位置。\n\n```php\n<?php\nfor ($i = 0; $i < 10; $i++) {\n    // for body\n}\n```\n\n### 5.5. `foreach`\n\n一个`foreach`语句看起来应该像下面这样。注意括号，空格和花括号的位置。\n\n```php\n<?php\nforeach ($iterable as $key => $value) {\n    // foreach body\n}\n```\n\n### 5.6. `try`, `catch`\n\n一个`try catch`语句看起来应该像下面这样。注意括号，空格和花括号的位置。\n\n```php\n<?php\ntry {\n    // try body\n} catch (FirstExceptionType $e) {\n    // catch body\n} catch (OtherExceptionType $e) {\n    // catch body\n}\n```\n\n6. 闭包\n-----------\n\n闭包在声明时`function`关键词之后`必须`有一个空格，并且`use`之前也需要一个空格。\n\n左花括号`必须`在同一行，右花括号`必须`在主体的下一行。\n\n参数列表和变量列表的左括号之后`不可`有空格，其右括号之前也`不可`有空格。\n\n在参数列表和变量列表中，逗号之前`不可`有空格，逗号之后`必须`有空格。\n\n闭包带默认值的参数`必须`放在参数列表后面。\n\n一个闭包声明看起来应该像下面这样。注意括号，空格和花括号的位置。\n\n```php\n<?php\n$closureWithArgs = function ($arg1, $arg2) {\n    // body\n};\n\n$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {\n    // body\n};\n```\n\n参数和变量列表`可以`被分成多个带一次缩进的后续行。如果这么做，列表的第一项`必须`放在下一行，并且一行`必须`只放一个参数或变量。\n\n当最终列表（不管是参数还是变量）被分成多行，右括号和左花括号`必须`夹带一个空格放在一起自成一行。\n\n下面是一个参数和变量列表被分割成多行的示例。\n\n```php\n<?php\n$longArgs_noVars = function (\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n) {\n   // body\n};\n\n$noArgs_longVars = function () use (\n    $longVar1,\n    $longerVar2,\n    $muchLongerVar3\n) {\n   // body\n};\n\n$longArgs_longVars = function (\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n) use (\n    $longVar1,\n    $longerVar2,\n    $muchLongerVar3\n) {\n   // body\n};\n\n$longArgs_shortVars = function (\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n) use ($var1) {\n   // body\n};\n\n$shortArgs_longVars = function ($arg) use (\n    $longVar1,\n    $longerVar2,\n    $muchLongerVar3\n) {\n   // body\n};\n```\n\n注意如果在函数或者方法中把闭包作为一个参数调用，如上格式规则同样适用。\n\n```php\n<?php\n$foo->bar(\n    $arg1,\n    function ($arg2) use ($var1) {\n        // body\n    },\n    $arg3\n);\n```\n\n\n7. 结论\n--------------\n\n在该指南中有很多风格的元素和做法有意被忽略掉。这些包括但不局限于：\n\n- 全局变量和全局常量的声明\n\n- 方法声明\n\n- 操作符和赋值\n\n- 行间对齐\n\n- 注释和文档块\n\n- 类名给你前缀和后缀\n\n- 最佳实践\n\n以后的建议`可以`修改和扩展该指南以满足这些或其他风格的元素和实践。\n\n附录A 调查\n------------------\n\n为了写这个风格指南，我们采用了调查个项目以确定共同的做法。这个调查在这里供他人查看。\n\n### A.1. 调查数据\n\n    url,http://www.horde.org/apps/horde/docs/CODING_STANDARDS,http://pear.php.net/manual/en/standards.php,http://solarphp.com/manual/appendix-standards.style,http://framework.zend.com/manual/en/coding-standard.html,http://symfony.com/doc/2.0/contributing/code/standards.html,http://www.ppi.io/docs/coding-standards.html,https://github.com/ezsystems/ezp-next/wiki/codingstandards,http://book.cakephp.org/2.0/en/contributing/cakephp-coding-conventions.html,https://github.com/UnionOfRAD/lithium/wiki/Spec%3A-Coding,http://drupal.org/coding-standards,http://code.google.com/p/sabredav/,http://area51.phpbb.com/docs/31x/coding-guidelines.html,https://docs.google.com/a/zikula.org/document/edit?authkey=CPCU0Us&hgd=1&id=1fcqb93Sn-hR9c0mkN6m_tyWnmEvoswKBtSc0tKkZmJA,http://www.chisimba.com,n/a,https://github.com/Respect/project-info/blob/master/coding-standards-sample.php,n/a,Object Calisthenics for PHP,http://doc.nette.org/en/coding-standard,http://flow3.typo3.org,https://github.com/propelorm/Propel2/wiki/Coding-Standards,http://developer.joomla.org/coding-standards.html\n    voting,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,no,no,no,?,yes,no,yes\n    indent_type,4,4,4,4,4,tab,4,tab,tab,2,4,tab,4,4,4,4,4,4,tab,tab,4,tab\n    line_length_limit_soft,75,75,75,75,no,85,120,120,80,80,80,no,100,80,80,?,?,120,80,120,no,150\n    line_length_limit_hard,85,85,85,85,no,no,no,no,100,?,no,no,no,100,100,?,120,120,no,no,no,no\n    class_names,studly,studly,studly,studly,studly,studly,studly,studly,studly,studly,studly,lower_under,studly,lower,studly,studly,studly,studly,?,studly,studly,studly\n    class_brace_line,next,next,next,next,next,same,next,same,same,same,same,next,next,next,next,next,next,next,next,same,next,next\n    constant_names,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper\n    true_false_null,lower,lower,lower,lower,lower,lower,lower,lower,lower,upper,lower,lower,lower,upper,lower,lower,lower,lower,lower,upper,lower,lower\n    method_names,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel,lower_under,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel\n    method_brace_line,next,next,next,next,next,same,next,same,same,same,same,next,next,same,next,next,next,next,next,same,next,next\n    control_brace_line,same,same,same,same,same,same,next,same,same,same,same,next,same,same,next,same,same,same,same,same,same,next\n    control_space_after,yes,yes,yes,yes,yes,no,yes,yes,yes,yes,no,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes\n    always_use_control_braces,yes,yes,yes,yes,yes,yes,no,yes,yes,yes,no,yes,yes,yes,yes,no,yes,yes,yes,yes,yes,yes\n    else_elseif_line,same,same,same,same,same,same,next,same,same,next,same,next,same,next,next,same,same,same,same,same,same,next\n    case_break_indent_from_switch,0/1,0/1,0/1,1/2,1/2,1/2,1/2,1/1,1/1,1/2,1/2,1/1,1/2,1/2,1/2,1/2,1/2,1/2,0/1,1/1,1/2,1/2\n    function_space_after,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no\n    closing_php_tag_required,no,no,no,no,no,no,no,no,yes,no,no,no,no,yes,no,no,no,no,no,yes,no,no\n    line_endings,LF,LF,LF,LF,LF,LF,LF,LF,?,LF,?,LF,LF,LF,LF,?,,LF,?,LF,LF,LF\n    static_or_visibility_first,static,?,static,either,either,either,visibility,visibility,visibility,either,static,either,?,visibility,?,?,either,either,visibility,visibility,static,?\n    control_space_parens,no,no,no,no,no,no,yes,no,no,no,no,no,no,yes,?,no,no,no,no,no,no,no\n    blank_line_after_php,no,no,no,no,yes,no,no,no,no,yes,yes,no,no,yes,?,yes,yes,no,yes,no,yes,no\n    class_method_control_brace,next/next/same,next/next/same,next/next/same,next/next/same,next/next/same,same/same/same,next/next/next,same/same/same,same/same/same,same/same/same,same/same/same,next/next/next,next/next/same,next/same/same,next/next/next,next/next/same,next/next/same,next/next/same,next/next/same,same/same/same,next/next/same,next/next/next\n\n### A.2. 调查说明\n\n`indent_type`:\n缩进类型。 `tab` = \"使用制表符\"，`2` or `4` = \"空格数量\"\n\n`line_length_limit_soft`:\n行长度的“软”限制，用字符。 `?` = 不表示或者数字 `no` 意为不限制.\n\n`line_length_limit_hard`:\n行长度的\"硬\"限制，用字符。 `?` = 不表示或者数字, `no` 意为不限制.\n\n`class_names`:\n类名如何命名 `lower` = 只是小写, `lower_under` = 小写加下划线, `studly` = 骆驼型.\n\n`class_brace_line`:\n类的左花括号是放在同(`same`)一行还是在下(`next`)一行？\n\n`constant_names`:\n类常量如何命名？`upper` = 大写加下划线分隔符。\n\n`true_false_null`:\n全校写或者全大写？\n\n`method_names`:\n方法名如何命名？`camel` = `驼峰式`, `lower_under` = 小写加下划线分隔符。\n\n`method_brace_line`:\n方法的左花括号在同(`same`)一行还是在下(`next`)一行？\n\n`control_brace_line`:\n控制结构的左花括号在同(`same`)一行还是在下(`next`)一行？\n\n`control_space_after`:\n控制结构关键词后是否有空格？\n\n`always_use_control_braces`:\n控制结构总是使用花括号？\n\n`else_elseif_line`:\n当使用`else`和`elseif`，是否放在同(`same`)一行还是在下(`next`)一行？\n\n`case_break_indent_from_switch`:\n`case`和`break`分别从`swith`语句处缩进多少次？\n\n`function_space_after`:\n函数调用的函数名和左括号是否有空格？\n\n`closing_php_tag_required`:\n如过是纯PHP文件，关闭标签`?>`是否需要？\n\n`line_endings`:\n使用何种的行结束符？\n\n`static_or_visibility_first`:\n在定义方法的时候`static`和可见性谁在前面？\n\n`control_space_parens`:\n在控制结构表达式中，左括号后面和右括号前面是否要有一个空格？`yes` = `if ( $expr )`, `no` = `if ($expr)`.\n\n`blank_line_after_php`:\nPHP的开始标签后面是否需要一个空行？\n\n`class_method_control_brace`:\n左花括号在类，方法和控制结构中的位置。\n\n### A.3. 调查结果\n\n    indent_type:\n        tab: 7\n        2: 1\n        4: 14\n    line_length_limit_soft:\n        ?: 2\n        no: 3\n        75: 4\n        80: 6\n        85: 1\n        100: 1\n        120: 4\n        150: 1\n    line_length_limit_hard:\n        ?: 2\n        no: 11\n        85: 4\n        100: 3\n        120: 2\n    class_names:\n        ?: 1\n        lower: 1\n        lower_under: 1\n        studly: 19\n    class_brace_line:\n        next: 16\n        same: 6\n    constant_names:\n        upper: 22\n    true_false_null:\n        lower: 19\n        upper: 3\n    method_names:\n        camel: 21\n        lower_under: 1\n    method_brace_line:\n        next: 15\n        same: 7\n    control_brace_line:\n        next: 4\n        same: 18\n    control_space_after:\n        no: 2\n        yes: 20\n    always_use_control_braces:\n        no: 3\n        yes: 19\n    else_elseif_line:\n        next: 6\n        same: 16\n    case_break_indent_from_switch:\n        0/1: 4\n        1/1: 4\n        1/2: 14\n    function_space_after:\n        no: 22\n    closing_php_tag_required:\n        no: 19\n        yes: 3\n    line_endings:\n        ?: 5\n        LF: 17\n    static_or_visibility_first:\n        ?: 5\n        either: 7\n        static: 4\n        visibility: 6\n    control_space_parens:\n        ?: 1\n        no: 19\n        yes: 2\n    blank_line_after_php:\n        ?: 1\n        no: 13\n        yes: 8\n    class_method_control_brace:\n        next/next/next: 4\n        next/next/same: 11\n        next/same/same: 1\n        same/same/same: 6\n', 'markdown', null, null, null, '2014-11-29 10:39:51', '2014-11-29 10:39:52', null);
INSERT INTO `l4_articles` VALUES ('33', '1', '2', '6', 'PSR-3 日志接口规范', 'psr-3-logger-interface', '日志接口\n================\n\n本文档用来描述日志类库的通用接口。\n\n主要目标是让类库获得一个`Psr\\Log\\LoggerInterface`对象并且使用一个简单通用的方式来写日志。有自定义需求的框架和CMS`可以`根据情况扩展这个接口，但`应当`保持和该文档的兼容性，这将确保使用第三方库和应用能统一的写应用日志。\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\",\n\"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be\ninterpreted as described in [RFC 2119][].\n\n关键词`实现者`在这个文档被解释为：在日志相关的库和框架实现`LoggerInterface`接口的人。用这些实现的人都被称作`用户`。\n\n[RFC 2119]: http://tools.ietf.org/html/rfc2119\n\n1. 规范\n-----------------\n\n### 1.1 基础\n\n- `LoggerInterface`暴露八个接口用来记录八个等级(debug, info, notice, warning, error, critical, alert, emergency)的日志。\n\n- 第九个方法是`log`，接受日志等级作为第一个参数。用一个日志等级常量来调用这个方法的结果`必须`和调用具体等级方法的一致。如果具体的实现不知道传入的不按规范的等级来调用这个方法`必须`抛出一个`Psr\\Log\\InvalidArgumentException`。用户`不应`自定义一个当前不支持的未知等级。\n\n[RFC 5424]: http://tools.ietf.org/html/rfc5424\n\n### 1.2 消息\n\n- 每个方法都接受字符串，或者有`__toString`方法的对象作为消息。实现者可以对传入的对象有特殊的处理。如果不是，实现者`必须`将它转换成字符串。\n\n- 消息`可以`包含`可以`被上下文数组的数值替换的占位符。\n\n  占位符名字`必须`和上下文数组键名对应。\n\n  占位符名字`必须`使用使用一对花括号为分隔。在占位符和分隔符之间`不能`有任何空格。\n\n  占位符名字`应该`由`A-Z`，`a-z`，`0-9`，下划线`_`和句号`.`。其它的字符作为以后占位符规范的保留。\n\n  实现者可以使用占位符来实现不同的转义和翻译日志成文。用户在不知道上下文数据是什么的时候`不应`提前转义占位符。\n\n  下面提供一个占位符替换的例子，仅作为参考：\n\n  ```php\n  /**\n   * Interpolates context values into the message placeholders.\n   */\n  function interpolate($message, array $context = array())\n  {\n      // build a replacement array with braces around the context keys\n      $replace = array();\n      foreach ($context as $key => $val) {\n          $replace[\'{\' . $key . \'}\'] = $val;\n      }\n\n      // interpolate replacement values into the message and return\n      return strtr($message, $replace);\n  }\n\n  // a message with brace-delimited placeholder names\n  $message = \"User {username} created\";\n\n  // a context array of placeholder names => replacement values\n  $context = array(\'username\' => \'bolivar\');\n\n  // echoes \"Username bolivar created\"\n  echo interpolate($message, $context);\n  ```\n\n### 1.3 上下文\n\n- 每个方法接受一个数组作为上下文数据，用来存储不适合在字符串中填充的信息。数组可以包括任何东西。实现者`必须`确保他们对上下文数据足够的掌控。在上下文中一个给定值`不可`抛出一个异常，也`不可`产生任何PHP错误，警告或者提醒。\n\n- 如果在上下文中传入了一个`异常`对象，它必须以`exception`作为键名。记录异常轨迹是通用的模式，如果日志底层支持这样也是可以被允许的。实现者在使用它之前`必须`验证`exception`的键值是不是一个`异常`对象，因为它`可以`允许是任何东西。\n\n### 1.4 助手类和接口\n\n- `Psr\\Log\\AbstractLogger`类让你非常简单的实现和扩展`LoggerInterface`接口以实现通用的`log`方法。其他八个方法将会把消息和上下文转发给它。\n\n- 类似的，使用`Psr\\Log\\LoggerTrait`只需要你实现通用的`log`方法。记住traits不能实现接口前，你依然需要`implement LoggerInterface`。\n\n- `Psr\\Log\\NullLogger`是和接口一个提供的。它`可以`为使用接口的用户提供一个后备的“黑洞”。如果上下文数据非常重要，这不失为一个记录日志更好的办法。\n\n- `Psr\\Log\\LoggerAwareInterface`只有一个`setLogger(LoggerInterface $logger)`方法可以用来随意设置一个日志记录器。\n\n- `Psr\\Log\\LoggerAwareTrait`trait可以更简单的实现等价于接口。通过它可以访问到`$this->logger`。\n\n- `Psr\\Log\\LogLevel`类拥有八个等级的常量。\n\n2. 包\n----------\n\n作为[psr/log](https://packagist.org/packages/psr/log) 的一部分，提供接口和相关异常类的一些描述以及一些测试单元用来验证你的实现。\n\n3. `Psr\\Log\\LoggerInterface`\n----------------------------\n\n```php\n<?php\n\nnamespace Psr\\Log;\n\n/**\n * Describes a logger instance\n *\n * The message MUST be a string or object implementing __toString().\n *\n * The message MAY contain placeholders in the form: {foo} where foo\n * will be replaced by the context data in key \"foo\".\n *\n * The context array can contain arbitrary data, the only assumption that\n * can be made by implementors is that if an Exception instance is given\n * to produce a stack trace, it MUST be in a key named \"exception\".\n *\n * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md\n * for the full interface specification.\n */\ninterface LoggerInterface\n{\n    /**\n     * System is unusable.\n     *\n     * @param string $message\n     * @param array $context\n     * @return null\n     */\n    public function emergency($message, array $context = array());\n\n    /**\n     * Action must be taken immediately.\n     *\n     * Example: Entire website down, database unavailable, etc. This should\n     * trigger the SMS alerts and wake you up.\n     *\n     * @param string $message\n     * @param array $context\n     * @return null\n     */\n    public function alert($message, array $context = array());\n\n    /**\n     * Critical conditions.\n     *\n     * Example: Application component unavailable, unexpected exception.\n     *\n     * @param string $message\n     * @param array $context\n     * @return null\n     */\n    public function critical($message, array $context = array());\n\n    /**\n     * Runtime errors that do not require immediate action but should typically\n     * be logged and monitored.\n     *\n     * @param string $message\n     * @param array $context\n     * @return null\n     */\n    public function error($message, array $context = array());\n\n    /**\n     * Exceptional occurrences that are not errors.\n     *\n     * Example: Use of deprecated APIs, poor use of an API, undesirable things\n     * that are not necessarily wrong.\n     *\n     * @param string $message\n     * @param array $context\n     * @return null\n     */\n    public function warning($message, array $context = array());\n\n    /**\n     * Normal but significant events.\n     *\n     * @param string $message\n     * @param array $context\n     * @return null\n     */\n    public function notice($message, array $context = array());\n\n    /**\n     * Interesting events.\n     *\n     * Example: User logs in, SQL logs.\n     *\n     * @param string $message\n     * @param array $context\n     * @return null\n     */\n    public function info($message, array $context = array());\n\n    /**\n     * Detailed debug information.\n     *\n     * @param string $message\n     * @param array $context\n     * @return null\n     */\n    public function debug($message, array $context = array());\n\n    /**\n     * Logs with an arbitrary level.\n     *\n     * @param mixed $level\n     * @param string $message\n     * @param array $context\n     * @return null\n     */\n    public function log($level, $message, array $context = array());\n}\n```\n\n4. `Psr\\Log\\LoggerAwareInterface`\n---------------------------------\n\n```php\n<?php\n\nnamespace Psr\\Log;\n\n/**\n * Describes a logger-aware instance\n */\ninterface LoggerAwareInterface\n{\n    /**\n     * Sets a logger instance on the object\n     *\n     * @param LoggerInterface $logger\n     * @return null\n     */\n    public function setLogger(LoggerInterface $logger);\n}\n```\n\n5. `Psr\\Log\\LogLevel`\n---------------------\n\n```php\n<?php\n\nnamespace Psr\\Log;\n\n/**\n * Describes log levels\n */\nclass LogLevel\n{\n    const EMERGENCY = \'emergency\';\n    const ALERT     = \'alert\';\n    const CRITICAL  = \'critical\';\n    const ERROR     = \'error\';\n    const WARNING   = \'warning\';\n    const NOTICE    = \'notice\';\n    const INFO      = \'info\';\n    const DEBUG     = \'debug\';\n}\n```\n', 'markdown', null, null, null, '2014-11-29 10:39:52', '2014-11-29 10:39:52', null);

-- ----------------------------
-- Table structure for `l4_migrations`
-- ----------------------------
DROP TABLE IF EXISTS `l4_migrations`;
CREATE TABLE `l4_migrations` (
  `migration` varchar(255) NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of l4_migrations
-- ----------------------------
INSERT INTO `l4_migrations` VALUES ('2014_09_09_135540_create_authority_tables', '1');
INSERT INTO `l4_migrations` VALUES ('2014_09_09_141726_create_blog_tables', '1');

-- ----------------------------
-- Table structure for `l4_password_reminders`
-- ----------------------------
DROP TABLE IF EXISTS `l4_password_reminders`;
CREATE TABLE `l4_password_reminders` (
  `email` varchar(255) NOT NULL COMMENT '邮箱',
  `token` varchar(255) NOT NULL COMMENT '令牌',
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  UNIQUE KEY `password_reminders_token_unique` (`token`),
  KEY `password_reminders_email_index` (`email`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='密码重置';

-- ----------------------------
-- Records of l4_password_reminders
-- ----------------------------

-- ----------------------------
-- Table structure for `l4_users`
-- ----------------------------
DROP TABLE IF EXISTS `l4_users`;
CREATE TABLE `l4_users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `email` varchar(255) NOT NULL COMMENT '邮箱',
  `password` varchar(255) NOT NULL COMMENT '密码',
  `portrait` varchar(255) DEFAULT NULL COMMENT '用户头像',
  `remember_token` varchar(255) DEFAULT NULL COMMENT '记住登陆状态的令牌',
  `is_admin` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否管理员',
  `signin_at` timestamp NULL DEFAULT NULL COMMENT '最后登录时间',
  `activated_at` timestamp NULL DEFAULT NULL COMMENT '邮箱激活时间',
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=MyISAM AUTO_INCREMENT=31 DEFAULT CHARSET=utf8 COMMENT='用户表';

-- ----------------------------
-- Records of l4_users
-- ----------------------------
INSERT INTO `l4_users` VALUES ('1', 'admin@demo.com', '$2y$10$fAppLEmQ9bbRS3/jpXOklOONgqMfZmD4SkPJ6zc9O3Th0RLTZhXxy', null, '7P4p1ishzKssrST25SbB5vGw6pM9dn9S27Rk3trzzr5E3EAsUMn3wMNapwob', '1', '2014-11-29 10:40:39', '2014-11-29 10:39:42', '2014-11-29 10:39:42', '2014-11-29 10:40:39', null);
INSERT INTO `l4_users` VALUES ('2', 'a1@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('3', 'a2@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('4', 'a3@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('5', 'a4@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('6', 'a5@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('7', 'a6@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('8', 'a7@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('9', 'a8@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('10', 'a9@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('11', 'a10@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('12', 'a11@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('13', 'a12@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('14', 'a13@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('15', 'a14@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('16', 'a15@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('17', 'a16@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('18', 'a17@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('19', 'a18@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('20', 'a19@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('21', 'a20@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('22', 'a21@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('23', 'a22@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('24', 'a23@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('25', 'a24@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('26', 'a25@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('27', 'a26@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('28', 'a27@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('29', 'a28@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
INSERT INTO `l4_users` VALUES ('30', 'a29@a.com', '$2y$10$axHKmToPB0HihGdeMtTyaujMUWorzrXEOHaKWbOC8fsV0UWcoQkOu', null, null, '0', null, '2014-11-29 10:39:48', '2014-11-29 10:39:48', '2014-11-29 10:39:48', null);
